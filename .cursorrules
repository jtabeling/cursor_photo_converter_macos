# Project Intelligence: Photo Converter

## macOS App Configuration Rules:

1.  **Info.plist is Critical:** Ensure the application target's Build Settings correctly point to the intended `Info.plist` file via the `Info.plist File` setting.
2.  **Info.plist Content:** Verify the `Info.plist` contains essential keys for app launch and permissions, especially:
    *   `CFBundleIdentifier`: Must be present and linked to the value in Target -> General -> Identity.
    *   Permission Usage Descriptions (e.g., `NSPhotoLibraryUsageDescription`): Required if accessing protected resources.
    *   Standard bundle keys (`CFBundleName`, `CFBundleExecutable`, etc.).
3.  **Info.plist Project Reference:** The `Info.plist` file must be included in the Xcode project structure (visible in the Project Navigator) and have Target Membership checked for the main app target.
4.  **Entitlements for Permissions:** Accessing protected resources like the Photos Library requires *both* the `Info.plist` usage description key *and* the corresponding capability/entitlement added in Target -> Signing & Capabilities (which updates the `.entitlements` file). Check the **App Sandbox** settings.
5.  **Clean Builds:** When encountering persistent configuration or build issues after making changes to `Info.plist`, `.entitlements`, or build settings, perform a **Clean Build Folder** (Product menu) and consider deleting **Derived Data**.

## Development Workflow Notes:

*   Early crashes (debugger fails to attach, logging system fails) often point to fundamental configuration issues (`Info.plist`, entitlements, code signing) rather than logic errors in the main code.
*   Use macOS **Console.app** -> **Crash Reports** to diagnose early launch crashes when Xcode's debugger doesn't provide enough information.

## Project Status & GitHub Integration:

*   **Current Status:** Core functionality complete. Logging and performance improvements in testing on `added-logger-2025-10-21` branch.
*   **GitHub Repository:** https://github.com/jtabeling/cursor_photo_converter_macos
*   **Version Control:** Git repository properly configured with comprehensive .gitignore for macOS/Xcode projects.
*   **Key Features Implemented:**
    *   HEIC to JPG conversion with full metadata preservation (GPS, camera info, etc.)
    *   Video conversion to MOV format with metadata preservation
    *   Organized filename generation based on creation date (YYYY-MM-DD_HH-MM-SS format)
    *   Title metadata matching filename for both images and videos
    *   **Controlled concurrent processing** (max 6 at a time) with progress tracking
    *   **Comprehensive logging system** for debugging and crash analysis
    *   Photos Library integration with proper permissions
    *   User-selected output folder with security-scoped access
*   **Architecture:** SwiftUI + ConversionService actor using Swift concurrency for responsive UI and controlled parallel processing + Logger singleton for crash-resistant debugging.
*   **Memory Bank:** Comprehensive documentation maintained in memory-bank/ directory (excluded from git via .gitignore).

## Concurrency & Performance Patterns (Learned 2025-10-21):

1.  **Concurrency Limits are Critical:** 
    *   Processing 100+ videos simultaneously causes "Cannot Save" file system errors
    *   macOS has limits on concurrent file operations and open file handles
    *   Solution: Limit concurrent conversions to 6 using queue-based processing
    *   Pattern: Start N tasks, as each completes, start the next one from the queue

2.  **Logging in Sandboxed Apps:**
    *   Cannot write to Documents folder from sandboxed app
    *   Must use Application Support: `~/Library/Containers/[bundle-id]/Data/Library/Application Support/`
    *   Use `FileManager.urls(for: .applicationSupportDirectory, in: .userDomainMask)`
    *   Create app-specific subdirectory for organization

3.  **Crash-Resistant Logging:**
    *   Use synchronous writes with `FileHandle.write()` + `synchronize()` for immediate disk flush
    *   Avoid `DispatchQueue.async` in logging - causes deadlocks with actors
    *   Use `NSLock` for thread safety instead of async queues
    *   Singleton pattern allows access from both actors and regular code

4.  **Debugging Large Batch Processing:**
    *   Log asset details at start of processing (dimensions, GPS, filename, UTI)
    *   Log export configuration (metadata counts, output paths)
    *   Log both success and failure outcomes with context
    *   Include timestamps for performance analysis 